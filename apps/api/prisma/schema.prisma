// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id      String @id @default(cuid())
  email   String @unique
  name    String
  surname String

  verified Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tokens       Token[]
  userSearches UserSearch[]
  reviews      Review[]
}

model Token {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  type      String
  expiresAt DateTime

  user User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([token])
}

model Course {
  id         String @id @default(cuid())
  courseCode String @unique

  cache        Json?
  cachedRating Float?

  rounds       CourseRound[]
  examinations Examination[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseCode])
}

model CourseRound {
  id          String  @id @default(cuid())
  courseId    String
  examinerId  String?
  term        String // eg: 20192
  name        String
  programCode String?

  cache        Json?
  cachedRating Float?

  course Course @relation(fields: [courseId], references: [id])

  reviews Review[]

  examiner Examiner? @relation(fields: [examinerId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Examination {
  id           String       @id
  courseId     String?
  title        String // Hemuppgift
  code         String // HEM1
  credits      Float // 4.5 hp
  gradingScale GradingScale

  course Course? @relation(fields: [courseId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum GradingScale {
  AF
  PF
}

model Review {
  id     String @id @default(cuid())
  rating Int // 1-5 
  userId String

  body String?

  courseRoundId String

  courseRound CourseRound @relation(fields: [courseRoundId], references: [id])
  user        User        @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseRoundId])
}

model Examiner {
  id String @id @default(cuid())

  name  String
  kthId String @unique

  courseRounds CourseRound[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserSearch {
  id     String @id @default(cuid())
  userId String
  search Json

  user User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
